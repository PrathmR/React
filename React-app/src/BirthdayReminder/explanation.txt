**Challenge1: Creating birthday view container**

Welcome to a new React project! In this project, 
we will use React to simply render a list of data items which will be birthdays of a few people.. 
This will be rendered from a static data source, 
and should help you understand how to import and use/clear data inside a state.

Let's start by creating some static views. 
One thing you can remember as a tip, you can always create static data holders first, 
and then populate them with dynamic data later on.

This is a very clean approach to build dynamic components as it allows 
you to make the component ready before you fill it dynamically with data.

Challenge Instructions
Inside your App.jsx file, create the following HTML hierarchy:
main > section.container > h3 + List
Hint: The above abbreviation means that your structure should look like the following:
<main>
	<section className="container">
    	<h3></h3>
        <List />
    </section>
</main>
Your h3 should contain the text:
0 birthdays today
Your <List /> component should be the List.jsx component which is imported at the top.



**Challenge2:Populating static list data
We have the basic UI available with us. 
Let us now populate the static data from the data.js file available. 
This file has been already opened for you on the right. 
Investigate this file and see how the JSON data is looking.

Challenge Instructions
Inside your App.jsx file, you should now replace 0 Birthdays 
Today with <item count> Birthdays Today. 
Therefore, initially, it should show 5 Birthdays Today Remember, 
the <item count> comes from the number of elements inside your data variable imported at top.
Hint: data.length
Pass the imported data variable as a prop to List component. This prop should be called people
Hint: <List people={data} />
In the List component, use this passed data to render 
just the names of the people for now. You can map over these people and display their names.



**Challenge3: Displaying the UI**

Now that we have the names of people from the static data, 
let us make the UI a little bit better. 
You can investigate all the CSS in the css files already, 
therefore, we will simply start using the CSS classes directly.

In this challenge, you only have to build up from the 
last challenge and create a UI inside List component.

Challenge Instructions
Inside your List.jsx file, iterate over the people prop 
and display the following HTML structure:
<article class="person">
	<img src="<image of user>" alt="<name of user>" />
	<div>
		<h4>NAME_OF_USER</h4>
		<p>AGE_OF_USER years</p>
	</div>
</article>
Make sure you replace the placeholders appropriately. 
Also, CSS classes in React JSX are named as className, just a reminder!



**Challenge4 Adding a Clear button**

In this final lab, let us now add a “Clear” button which will 
clear the records and would reset it to 0 Birthdays. 
The button is already available for you, you just have to make sure of its functionality.

Challenge Instructions
Create a new state variable called people
The initial value of this state variable should be the imported data from top.
Pass this state variable now in the List component.
When the Clear button is pressed, empty the state variable 
so that no record is displayed (Hint: set it to an empty array)