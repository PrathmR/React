Introduction
Welcome to a new project! In this project, we will attempt to build the video
 interface of tiktok and clone it with React. Our objective in this lab is:

Create same video interface as tiktok
Use real videos
The videos should scroll and snap properly
Fetch video information from an API URL.
The UI should be built with React
In this classroom, we will build the whole interface for tiktok making 
sure of all the things listed above. On the right, you can see how the final app 
would look and feel like. 
From the next lab onwards, we will start building this from scratch. Let’s go!



**Challenge1: Creating the project structure**
For the player tiktok clone, we will use the following components overall:

Video.jsx - This will contain our video element and other 2 components below
FooterLeft - This consists of information you see about the tiktok 
video (title, description, music, etc.)
FooterRight - This consists of like, share, and comment buttons. 
For this lab, we will focus exclusively on the UI of these buttons.
Challenge Requirements
Let us build the Video.jsx component in this lab. 
Read the requirements below carefully in order to pass this challenge:

You should create a new file called Video.jsx (already created for you)
Inside this file, make sure you have a div with class video as the root element.
Inside div.video, make sure you have a video element with class player and loop attribute set as well.
Your video element should have the src of props.url where url is passed as the component prop.


**Challenge2: Adding player styles
By now, you should be able to see a simple video poster preview in your browser. 
This doesn’t do much for us though. 
Let us style the player first, so it is in the center of the screen and has the correct dimensions.

We will use some interesting CSS properties along the way and will discuss them 
briefly here for the context

scroll-snap-type CSS property
The scroll-snap-type CSS property sets how strictly snap points are enforced on 
the scroll container in case there is one. Check out the demo and read more about it on MDN.

Challenge Requirements
In this challenge, you’ll be working with App.css file in your structure. 
Make sure of the following points to pass this lab:

On your html selector, set the scroll-snap-type property value to y mandatory
The .app CSS selector should have a background of black
The .app CSS selector should be a grid (Hint: display property)
The .app CSS selector should have place-items: center
The .container element should have the height as 90vh and width as 50.625vh
tip
The reason we selected the height and width as 90vh and 50.625 vh is 
because they are in the ratio 9:16 which is the ratio of the tiktok (vertical) videos.

The .container element should have relative position.
The .container element should have overflow set to scroll
The .container element should have border-radius set to 20px
Bonus tip: Also hide the scrollbars with the following CSS:

/* Hide scrollbar for Chrome, Safari and Opera */
.container::-webkit-scrollbar {
	display: none;
}

/* Hide scrollbar for IE, Edge and Firefox */
.container {
	-ms-overflow-style: none; /* IE and Edge */
	scrollbar-width: none; /* Firefox */
}



**Challenge3 :Loading multiple videos through API
We are making progress! Let us now load multiple videos through an API. 
You can already see the endpoint for JSON URL set in the App.jsx file.

To pass this lab, take care of the following things:

fetch the data of the API and set the data inside the videos state variable 
(Hint: You can use fetch inside useEffect for now)
Inside div.container, do a Array.map over the videos state variable 
inside App.jsx file and render a <Video /> component for every video.
Make sure to pass the src appropriately in the Video component as well.


**Challenge4 : Snapping videos to top
Alright. Now that you can see the videos on the right, 
you should be able to scroll inside that div to see different videos. 
However, one thing you will quickly notice is that videos are not getting “snapped” at the top, 
like it will happen in the app.

Remember we added scroll-snap-type earlier? Let us add another similar property 
called scroll-snap-align

scroll-snap-align
scroll-snap-align is part of the CSS Scroll Snap Module. 
Scroll snapping refers to “locking” the position of the viewport to specific 
elements on the page as the window (or a scrollable container) is scrolled. 
Think of a scroll-snapping container like putting a magnet on top of an element that 
sticks to the top of the viewport and forces the page to stop scrolling right there.

scroll-snap-align is a required property for a scroll-snapping element within a 
scroll-snapping container. For more information on scroll-snapping containers see 
the scroll-snap-type in the last few labs on html element. 

scroll-snap-align tells the browser which part of an element should be aligned 
when a snap point is encountered: Should the element snap to the start, center , 
or end of the parent container that contains the scroll-snap-type property?

If you want an element to snap into place at the start of that element, give it 
a scroll-snap-align value like so:

/* Assuming this element is a child of a container with `scroll-snap-type` set */
.element {
  scroll-snap-align: start;
}
In this lab, you’re required to set scroll-snap-align to start on the .video element


**Challenge5:Creating video metadata panel**

So far so good! We now have a decent video preview 
(video still doesn’t play, we will fix it later). 
Let us add the metadata preview (the video description, creator name, song name, etc.) 
in this lab and style them all. This is going to be a long lab, so buckle up!

Challenge Requirements
Important note: Make sure you use exact CSS selectors as mentioned below, 
otherwise your tests might fail. (i.e. if both h3 > p and h3 p are valid, 
but the doc below says to use h3 p, then h3 > p although would work fine, might fail the test)

To pass this lab, make sure of the following things:

In your FooterLeft.jsx component, create the following JSX hierarchy:
<div className="footer-left">
	<div className="text">
		<h3>@{channel}</h3>
		<p>{description}</p>
		<div className="ticker">
			<MusicNoteIcon style={{ width: '30px' }} />
			<marquee direction="left" scrollamount="2">
				{song}
			</marquee>
		</div>
	</div>
</div>
The channel, description and song are coming from the prop of the component. 
You will be able to see how the props are passed in the Video.jsx file.
Inside App.jsx file, all the props are passed for you for this lab, therefore, 
you can access them directly in Video.jsx file and pass them down to your FooterLeft.jsx component.
Note that marquee tag in HTML will create that scrolling like effect, no need of any custom CSS or JS!
Also note that MusicNoteIcon is already present for you as SVG component 
inside icons folder, therefore you need to import it from there.
Now, let us discuss styling the components. These are tested and are important to implement:

Inside Video.css file in the .video selector, make sure the following styles are applied:
Property	Value
background-color	white
width and height	100%
text-shadow	0 0 4px rgba(0, 0, 0, 0.5)
scroll-snap-align	start
position	relative
Your video element has the className of player. Inside the Video.css file,
 add the following styles to .player selector:
Property	Value
position	absolute
object-fit	fill
top and left values	0
width and height values	100%
Finally, for the .bottom-controls selector inside Video.css file, do the following:
Property	Value
display	flex
align-items	flex-end
height	100%
Let us now come to FooterLeft.css file.

This file should be imported inside your FooterLeft.jsx file. 
Make sure of the following pointers inside the CSS file FooterLeft.css:

The selector .footer-left should be styled as follows:
Property	Value
position	relative
flex element should grow	yes
color	white
pointer-events	none
display	flex
margin-left	15px
margin-bottom	30px
There’s more! The .ticker selector should be:
Property	Value
height	fit-content
width	60%
display	flex
align-items	center
Keep going. The .ticker marquee selector should be:
Property	Value
display	flex
align-items	center
We’re almost done. Now style the .text selector. The width of .text should be 100%
Finally, for .text h3 and .text p containing the handle and 
description respectively, give a padding-bottom of 20px
You’re done :)
Bonus styles:

To give an inner box-shadow effect, add the following to your CSS. 
Make sure you understand what every property does here!

.video::before {
	content: '';
	display: block;
	box-shadow: 0 -33px 48px rgba(0, 0, 0, 0.5) inset;
	width: 100%;
	pointer-events: none;
	z-index: 99;
	height: 100%;
	top: 0;
	left: 0;
	position: absolute;
	background: transparent;
}


**Challenge6: Creating like, share, comment and music disc buttons**
So far we have created the video snapping effect on scroll, 
and the little footer for controls. However, we are still missing 
the buttons we’re supposed to see on the bottom right side. Let us add those in this lab.

Buttons to add
Like - the icon file for this is present in icons/FavoriteIconBordered.jsx
Share - the icon file for this is present in icons/Share.jsx
Message - the icon file for this is present in icons/Message.jsx
Disc - this is an image - https://static.thenounproject.com/png/934821-200.png
Challenge Requirements
To pass this lab, make sure of the following things:

Your FooterRight.jsx component should look like the following:
<div className="footer-right">
	<div className="sidebar-icon">
		<FavoriteBorderIcon
			style={{ width: '40px', height: '40px' }}
		/>
		<p>{likes}</p>
	</div>
	<div className="sidebar-icon">
		<MessageIcon style={{ width: '40px', height: '40px' }} />
		<p>{messages}</p>
	</div>
	<div className="sidebar-icon record-below">
		<ShareIcon style={{ width: '40px', height: '40px' }} />
		<p>{shares}</p>
	</div>
	<div className="sidebar-icon record">
		<img src="https://static.thenounproject.com/png/934821-200.png" />
	</div>
</div>
Make sure the hierarchy above is correct
The FooterRight.jsx component is already included and used with 
correct props passed to it in the Video.jsx component.
However, in your FooterRight.jsx component, make sure you are correctly 
destructing the props and using them appropriately - likes, messages, shares are passed as props.
Let us now come to CSS coding. Inside your FooterRight.css file, make 
sure of the following points below
.footer-right selector should have z-index of 100, color as white and 15px of margin-right
.sidebar-icon selector should have 50px width, flex as the display, 30px 
as margin-bottom, the flex-direction should be column, justify-content 
and align-items both should have center value and text-align should also be center
The .record selector should have 5 second linear infinite animation of 
name spinTheRecord (the @keyframes declaration is already present for you in the file itself). 
It should also have filter property of invert(1) to turn the black image into white.
Finally, your .record-below selector should have a bottom margin of 70px
Good luck!