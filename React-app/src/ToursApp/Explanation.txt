Introduction to Project
Welcome to another React practice project. In this project you have to create 
a Tours app in React, which is a simple UI app fetching data 
over network and then displaying it on the screen.

**Challeng1: Fetching Tours Data**
This project relies on data from a remote API, 
so let us fetch that JSON data before doing anything else. 
In React, there are much better ways of handling data fetching 
which comes baked in with caching and revalidation of data, 
but because this is a beginner level classroom project, we want to learn how to do it using 
just fetch API provided by the browser.

This is how a basic fetch request can be performed in a React component:

const MyComponent = () => {
   useEffect(() => {
      fetch('<YOUR URL>').then(data => {
         // work with your data
      })
   }, [])
}
Let us break this down:

We use a useEffect hook, because we want to run this query only once.
How do we make sure we run this query only once? We make sure by passing an 
empty array [] as the second argument in the useEffect hook. Remember that useEffect hook
 will be called every time any dependency within that dependency array gets changed 
 (this is a simplified statement, but would work for now). Therefore, by passing an 
 empty array, we want useEffect to never be called again.
Because all useEffects are automatically called once the component is mounted, this 
will run exactly one time per component mount.
Challenge Instructions
To pass this lab, take care of the following things:

Create a state variable tours (done for you)
Use useEffect hook and call the fetchTours() function.
Inside fetchTours , fetch the contents of the API URL: https://course-api.com/react-tours-project
Once fetched, set the data to tours state variable.
This should now automatically display some data in UI which should pass your tests.


**Challeng2:Setting Loader
Sometimes, network calls might take a few seconds to complete. 
In that case, you almost always want to convey the message to user that you are 
loading something, especially if you have no upfront data to show to the user. 
In this lab, we will implement a “loading” screen while our data is loading.

Challenge Instructions
To pass this lab, take care of the following things:

Create a state variable loading and initialize this variable to true. (done for you)
Before you call your network request, set the loading variable to true.
Once network request completes, set the loading variable back to false.
Your render screen should show the Loading component for some time, 
and once data is loaded it should automatically show it again.


**Challeng3: Creating Tours UI
Now that we have data and loader, let us quickly create 
the UI for tours. For this, you have to pass your fetched data as a prop,
 and then use the template provided to render UI. We will be working with 3 files in this lab.

Challenge Instructions
To pass this lab, take care of the following things:

Pass down your tours into the <Tours /> component in the App.jsx file.
Inside the Tours.jsx file, you have to map on 
the passed tour data in the prop, and render <Tour /> component for every item.
This <Tour /> component should receive all the properties 
of the object as props, i.e., an example could be:
<Tour 
id={2} 
image={"something"} 
info={"something"} 
price={3} 
name={"something"} />
In the Tour component, use the props passed above to render the following markup:
<article className="single-tour">
<img src="<IMAGE>" alt="<NAME>" />
<footer>
<div className="tour-info">
<h4>NAME</h4>
<h4 className="tour-price">PRICE</h4>
</div>
<p>INFO</p>
<button className="delete-btn">Not Interested</button>
</footer>
</article>
Make sure you replace the placeholders correctly.


**Challeng4:Adding "Read More" button
The UI looks great! However, you can see that the description is too long. 
Let us add a “Read More” button allowing a person to read the full description if they want.
 Otherwise, we will keep a short excerpt of the description.

Challenge Instructions
To pass this lab, take care of the following things:

Inside your Tour.jsx file, create a state variable called readMore
Write logic to show the first 200 characters of props.info in your <p>
 tag inside this file if readMore state variable is true. If it is false, show the full props.info
Hint:
const str = "My awesome string"
const smallStr = str.substring(0, 5) // stores first 5 characters: "My aw"
Add a new button inside your <p> tag (done for you), which when clicked should 
toggle the value of readMore state variable.
This button should conditionally show the following texts: If readMore is true, 
then show show less otherwise show read more as the text.
