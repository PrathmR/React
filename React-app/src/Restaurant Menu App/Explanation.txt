Introduction to project
Welcome to a new React project! In this project, we will use React to create a 
full single page application for a Restaurant menu with category based filters.


**Challenge1:Getting basic UI Ready**
Welcome to the second lab. In this lab let us go ahead and create the UI for App.jsx file. 
To pass this lab, make sure of the following things:

Your App.jsx structure should look like this
<main>
	<section className="menu section">
		<div className="title">
			<h2>our menu</h2>
			<div className="underline"></div>
		</div>
		<Categories />
		<Menu />
	</section>
</main>

**Challenge2:Passing data to Menu page
Alright! Take a look inside data.js file. 
It is a JSON file containing the data for your page. 
In this lab, let us go ahead and first of all pass our data to the Menu 
component present inside App.jsx which you created in the last lab. 
To pass this lab, make sure of the following things:

Inside Menu.jsx make sure you receive a prop called items. 
This passed prop will be an array of objects (from data.js file)
Inside App.jsx pass the data imported from the data.js to Menu.jsx file. 
You can do it directly for now, but later we will create a state variable using useState 
to store the menu items, because we might need to change it depending on the category.
Inside Menu.jsx, make sure your UI looks as following:
<div className="section-center">
	for each item in passed item props:
	 <article className="menu-item">
		<img src={IMAGE OF ITEM} alt={TITLE OF ITEM} className="photo" />
		<div className="item-info">
			<header>
				<h4>{TITLE OF ITEM}</h4>
				<h4 className="price">${PRICE OF ITEM}</h4>
			</header>
			<p className="item-text">{DESC OF ITEM}</p>
		</div>
	</article>
</div>

**Challenge3:Creating Categories
This will be a quick lab. In this lab, let us go ahead and populate our Categories.jsx file. 
This component will be responsible for displaying categories at the top 
to toggle different items on the menu. To pass this challenge:

Make sure your returned UI from Categories.jsx looks like this:
<div className="btn-container">
	<button className="filter-btn">All</button>
	<button className="filter-btn">Breakfast</button>
	<button className="filter-btn">Shakes</button>
</div>


**Challenge4: Creating filter function
If you observed, in the last lab we modified the logic to 
use a state variable to store the items from data.json file. 
This is because we want to dynamically set the items visible on the screen depending
 on the selected button.

To pass this lab, make sure of the following things:

There’s a function passed called filterItems to Categories.jsx component. 
On every button call, make sure to call this function.
In the file App.jsx, implement logic inside filterItems function to setMenuItems 
depending on what category of a button is clicked. For example, if you click on Shakes button, 
you should call filterItems(‘shakes’) and then inside filterItems, update the menuItems 
to contain only the items with category as shakes, i.e. only “godzilla milkshake”,
 “oreo dream” and “quarantine buddy”
You should finally set it using setMenuItems and the UI would update automatically, 
thanks to React.
Note: You have to handle the case of clicking All button in a special way, 
and make sure all items are displayed.


**Challenge5: Making categories dynamic
You can see that right now we manually create the category buttons by hardcoding 
the values to be called while calling filterItems function. This is error-prone 
and cumbersome to maintain, say when you want to add more items to your data,
 or in cases where you don’t even know what the data will look like (from an HTTP request, for example)

To pass this lab, make sure of the following things:

You can see Categories component now receives another prop called categories from App.jsx file.
This prop should be a unique set of values of all category fields inside your data.js file.
Therefore, you have to compute all the unique values from data.js file 
(as multiple items might have same category) and then pass it in the 
<Categories component call in App.jsx
Your task is to modify the categories array at the top in App.jsx file
 to include only unique categories, and then render them in the Categories component.
Note: Do it dynamically, not by manually writing your categories